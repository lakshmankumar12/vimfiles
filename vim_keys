q - recording                                    Q - ex mode. RECLAIM!                  (Bound to :tabclose)
w - word next                                    W - Blank-sep word forward
e - word end                                     E - Blank-sep word end
r - remove char                                  R - Remove multi chars
t - just before char (mnemonic : till)           T - backward-t
y - yank                                         Y - linewise yank(but same as yy). Useful if nmaped to y$
u - undo                                         U - undo changes on a line
i - insert                                       I - append at start of line
o - insert next line                             O - append at prev line
p - paste                                        P - paste before char
a - append                                       A - append at end of line
s - substitute  -- RECLAIM!                      S - RECLAIM!                        (bound s/S to easy-motion)
d - delete                                       D - delete till end of line
f - find char                                    F - backward-f
g - go                                           G - end of file
h - left                                         H - top of window
j - down                                         J - join lines
k - up                                           K - man page
l - right                                        L - end of window
z - fold                                         Z - RECLAIM!                       (bound to :qfixtoggle)
x - del                                          X - backspace
c - change                                       C - change till end of line
v - visual                                       V - line visual
b - word-back                                    B - blank-sep word backwardn
n - find-next                                    N - search back
m - mark                                         M - Middle of page


` - goto mark with column precision
~ - toggle case
1-9 - repeat count
0 - beg of line
! - not sure (RECLAIM?)
@ - recordplay
# - search back
$ - end of line
% - match brace
^ - beg of non-white char of line
& - repeat last substitue (:s command)
* - search backwards
( - para begin
) - para end
{} - block navigation
[] - diff navigation
-  forward line  RECLAIM  (Bound to :cprev)
+  backward line RECLAIM  (Bound to :cnext)
= - indent
: repeat F/T
; repeat f/t
' goto mark to beg of line
" to select register for yank/paste
, RECLAIM  (same as ;)
. repeast last action
| goto column
\ Leader
/ search
? search backwards

g is a super powerful key: (gem key, literally!)

ga  - show hex of char under cursor  
gd  - goto local declaration of word                               gD   --  global delcartion
ge - got to end of prev word                                       gE   --  prev Non-blank word
gf - open file under cursor                                        gF   --  file:line num works
gg - begining of file
gi - insert at previous insertation stop point                     gI   -- At column 1 (I will be first non-blank)
gj - go down on screen line                                        gJ   -- like J, but no space
gk - go upon screen line
gm - half g0
gn - next and visual the word                                      gN   -- backward gn
go - got to nth byte in buffer
gp - like p, but leave cursor after pasted text                    gP   -- like P/gp, but P'ed effect  (Reclaimed to paste from clipboard+)
gr - virtual replace (like screen estate useful on file with tabs) gR   -- virt-replace mode
gs - sleep
gt - next tab                                                      gT   -- prev tab
gu - lower case text                                               gU   -- upper-case text
gv - repeat previous virtual selection
g0 - screen beg line
g~ - toggle case (of motion)
g#/g* - like #/*, but no \<..\>
g$ - screen-end
g% - % backwards
g^ - first non-blank in screen
g& - repeat last subtittue
g] - show tags under cursor
g; - goto position in change list
g, - goto position in change list rev order


RECLAIMable in g:
gb - some netrw bookmark            (copy to system cliboard)
gc - none                           (Bound to Keep window with only quickfix)
gh - enter select mode
gl - none                           (Bound to FZF)
gq - format motion.(can use visual+= instead)
gw - format motion.
   gww                              (Bound to :update)
   gwh                              ( gw h,j,k,l -> window movements)
   gwj
   gwk
   gwl
   gwo                              (Bound to Zoomwin)
   gwt                              (New tab)
   gwg                              (Bound to gitGuttter disable)
   gwr                              (set wrap toggle)
   gwH                              ( gw H,J,K,L -> window close operations)
   gwJ
   gwK
   gwL
gx - netrw stuff                    (Bound to cscope operations)
gy - none                           (Bound to set pastetoggle)
gz - none                           (Bound to solarized toggle bg)

gA                         (Bound to tags_s)
gB                         (Bound to FzfBuffers)
gC
gG                         (Bound to tags_*)
  gGG                                tags_f
  gGS                                tags_s
  gGT                                tags_s (typedef or struct)
  gGM                                tags_m
  gGV                                tags_v
  gGD                                tags_d
  gGE                                tags_e (defines or enum)
gH                         (Bound to :lprev)
gK
gL                         (Bound to :lnext)
gM
gO                         (Bound to GotoTagLastName)
gS                         (Bound to MoveToDefintionOfMember)
gV  -- select-mode stuff.  (Bound to ToggleMouse)
gW                         (Bound to RemoveTrailWhite)
gX                         (Flush Search)

z-keys
------

za - toggles  a fold (Similar: zc/zo/za)                                  zA  - za at all folding levels
zb - bring line to bottom
zc - close a fold (in an existing fold(determined by mode))               zC  - zc at all folding levels
zd - delete one fold on cursor (in manual-fold mode)
ze - bring current column to end of screen
zf - create a fold (in manual-fold mode)
zg - open current work to good work (spell file) (BOUND to vcs fing g)
zh - move view one step right                                             zH  - scroll left by half-screen
zi - Invert foldenable
zj - goto next fold down
zk - goto end of previous fold
zl - move view one step step                                              zL  - scroll right by half-screen
zm - adds one fold level thru whole buff(inverse of zr)                   zM  - closes all folds in file
zn - fold none (reset foldenable)                                         zN  - set foldenable
zo - open fold under curor (in an existing fold)/complement of zc         zO  - zo at all folding levels
zp - NONE                       (Bound to :lopen)
zr - reduces folding by opening one foldeding level over whole buf        zR  - open all folds
zs - bring current column to start of screen
zt - ..?..
zu - word-lists sth
zv -  open enuf folds to see line
z0 - 
z~ - 
z#/g*
z$ - 
z% - 
z^ - 
z& - 
z] - 


control keys:

C-a : increment
C-b : screen-back
C-c : abort
C-d : screen-down
C-e : scroll-lines downwards
C-f : screen-down
C-g : info on current-file
C-h : None.. RECLAIM
C-i : new position in jump list
C-j : lines downwards . RECLAIM
C-k : enter digraph
C-l : refresh screen
C-m - line downward .. non-white RECLAIM      (Dont mess .. bulbs entering in command-^f prompt)
C-n : lines downwards . RECLAIM               (NerdTreeToggle)
C-o : jump older
C-p : RECLAIM
C-q : visual block (esp in windows)
C-r : Redo
C-s : None
C-t : tag pop
C-u : scroll up
C-v : visual block
C-w : windows
C-x : decrement
C-y : scroll-lines upwards
C-z : suspend vim

Insert mode control keys

c-a : repeat previous insertion
c-b : none
c-c : exit insert mode
c-d : del one shift-width indent
c-e : insert char from below-line
c-f : some indentation thing
c-g : navigation (follow with jk)
c-h : backspace
c-i : insert tab(or spaces)
c-j : newline
c-k : enter-digraph
c-l : go to normal mode
c-m : newline
c-n : next-match-word (auto-complete)
c-o : execute one command and come back
c-p : next-match-work (auto-complete)
c-q : same as c-v, enter sth literally
c-r : paste register
c-s : nothing
c-t : indent one sw
c-u : del all chars in a line
c-v : enter sth literally
c-w : del word
c-x : control-x submode
c-y : insert char from above-live
c-z : suspend vim

Window mgmt keys C-w, then

C-a : none
C-b : go to bottom most window
C-c : plain-c closes. Ctrl-c cancels
C-d : Open new window with macro on curosr
C-e : nothing
C-f : like gf, but in a split window!
C-g : nothing
C-h : left
C-i : open new window with same file, ANd bring cursor to first appearance of cur-word
C-j : down
C-k : up
C-l : right
C-m : nothing
C-n : new window
C-o : only
C-p : prev window
C-q : quit current window. Dont type! quits vim
C-r : rotate window (R rever dir) (Useful to exchange and stay in curr file)
C-s : split current to two horizonltally
C-t : top
C-u : nothing
C-v : split current to two vertically
C-w : without count, below-right, with count, goto nth window
C-x : exchange and come to other file.
C-y : nothing
C-z : close preview (not quickfix!)
C-] : split window on defintiion of cur-word
C-^ : new window on prev-buffer
C-_ : zoom window horizontally (unfortunatey can't restore that easily. Try =)
C-| : zoom window vertically (unfortunatey can't restore that easily. Try =)
+/-/</>/= : resize
H   : MOVE curr-window far left
J   : bot
K   : up
L   : right
P   : goto preview(not quickfix)
T   : move window to a new tab
}   : tag under cursor in preview

Command-mode
-------------

:help c_ctrl-a

C-a  :  all names to the left of pattern are inserted (Like auto tab-completion)
C-b  :  goto beginning of line
C-c  :  quit command line w/o executing
C-d  :  List names that match the pattern in front of the cursor. (like ? in our cli prompt)
C-e  :  goto end of line
C-f  :  open the command-line window
C-g  :  Nothing. RECLAIM
C-h  :  backspace
C-i  :  insert first match (tab-completion)
C-j  :  Enter (execute command)
C-k  :  digraph
c-l  :  Insert longest common (tab-completion)
C-m  :  Nothing. RECLAIM
C-l
C-m
C-n
C-o
C-p
C-q
C-r
C-s
C-t
C-u
C-v
C-w
C-x
C-y
C-z
C-]
C-^
C-_
C-|


Search modifiers
---------------

\c<pattern> will ignore case
<pattern>/e will place cursor at end of pattern
         /s will place curros at start of pattern (needed when combining number below)
         /<num>  will goto line-above (or chars if e/s is used). This is 0-based counting. 1 will be next char. 0 is redundant to mention
         /-num     --do--      -below ( --do-- )

Other Vim Tips:
===============

In a huge list of cscope-s results on a function-name, to quickly find the function defintion, try

function_name\s*(\s*\w\+\s\+\w.*,
\w\+\s*(\s*\w\+\s\+\w.*,

i.e name space* ( space* word+ space+ word+ .* ,
    The idea is only definition will have 2 words min between ( and , arg-type and arg-name, while invocations will have just argname. 
    The -> and . will separate words in invocations too, but hopefully they dont have space inbetween!


:set hidden  # option enables the non-saving of files while switching
echo &hidden # is a way to see the current setting.

Colors in vim:
-------------

Its either cterm or gui.
cterm colors are either words or nubmers from 0 to 255. To know colors use the plugin :XtermColorTable
gui colors are either words or RGB spec

Soloarized sticks to the first 16 colors.

ctermbg=red ctermfg=white
guibg=#8CCBEA guifg=Black


To know which plugin set the setting last
-----------------------------------------

:verbose set iskeyword?

Set vertical scrollbind in 2 splits
-----------------------------------

:windo setlocal scrollbind
ctrl-W <size> |   " to fix the vertical size

Diff
----

If diff gets wonky, do
:diffupdate
--or--
:bufdo diffoff
and diff again.

Navigating based on indent (for config files)
---------------------------------------------

(Effected by plugin vim-indentwise)

:set foldmethod=indent
]= / [=  -- next/prev lines on same indentation level
[-       -- prev .. go one level up

Fold Management
---------------

zR/zM  -> open-all-folds/close-all-folds
zo/zc  -> open/close jsut one fold
zO     -> open all folds in cursor recursively

Org mode
--------

end files in .org

* Heading 1
** Heading 2
   - List item   (<leader>cl/cL)
   - [ ] Check bo (<leader>cn/cN)  (toggle status <leader>cc)

Multiple Highlight
------------------

\m  to highlight current word
\r  to get prompt and enter regex
:MarkClear to reset everything
\*  to go to the next occurence of last mark. If you do this on a marked word,
    that becomes the last mark.
\/  to any mark

Spell check
----------

:set spell
]s next misspelled word
[s prev misspelled word

Mark and save a subset to another file
--------------------------------------

mA
mB
then
:'A,'B w! /tmp/a


help expand
------------



%    current file name
#    alternate file name
#n    alternate file name n
<cfile>    file name under the cursor
<afile>    autocmd file name
<abuf>    autocmd buffer number (as a String!)
<amatch>  autocmd matched name
<sfile>    sourced script file name
<slnum>    sourced script file line number
<cword>    word under the cursor
<cWORD>    WORD under the cursor
<client>  the {clientid} of the last received
message |server2client()|
Modifiers:
:p    expand to full path
:h    head (last path component removed)
:t    tail (last path component only)
:r    root (one extension removed)
:e    extension only
